package com.liferay.docs.infos.model.impl;

import com.liferay.docs.infos.model.Farmer;
import com.liferay.docs.infos.model.FarmerModel;
import com.liferay.docs.infos.model.FarmerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;infos_Farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.infos.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see FarmerImpl
 * @see com.liferay.docs.infos.model.Farmer
 * @see com.liferay.docs.infos.model.FarmerModel
 * @generated
 */
@JSON(strict = true)
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link com.liferay.docs.infos.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "infos_Farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "farmerId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "orgName", Types.VARCHAR },
            { "legalForm", Types.VARCHAR },
            { "inn", Types.VARCHAR },
            { "kpp", Types.VARCHAR },
            { "ogrn", Types.VARCHAR },
            { "regDate", Types.TIMESTAMP },
            { "isArchived", Types.BOOLEAN },
            { "districtId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table infos_Farmer (farmerId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,orgName VARCHAR(75) null,legalForm VARCHAR(75) null,inn VARCHAR(75) null,kpp VARCHAR(75) null,ogrn VARCHAR(75) null,regDate DATE null,isArchived BOOLEAN,districtId LONG)";
    public static final String TABLE_SQL_DROP = "drop table infos_Farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.orgName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY infos_Farmer.orgName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.docs.infos.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.docs.infos.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.docs.infos.model.Farmer"),
            true);
    public static long DISTRICTID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long INN_COLUMN_BITMASK = 4L;
    public static long ISARCHIVED_COLUMN_BITMASK = 8L;
    public static long ORGNAME_COLUMN_BITMASK = 16L;
    public static long REGDATE_COLUMN_BITMASK = 32L;
    public static final String MAPPING_TABLE_INFOS_FARMERS_DISTRICTS_NAME = "infos_Farmers_Districts";
    public static final Object[][] MAPPING_TABLE_INFOS_FARMERS_DISTRICTS_COLUMNS =
        {
            { "districtId", Types.BIGINT },
            { "farmerId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_INFOS_FARMERS_DISTRICTS_SQL_CREATE = "create table infos_Farmers_Districts (districtId LONG not null,farmerId LONG not null,primary key (districtId, farmerId))";
    public static final boolean FINDER_CACHE_ENABLED_INFOS_FARMERS_DISTRICTS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.infos_Farmers_Districts"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.docs.infos.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private long _farmerId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _orgName;
    private String _originalOrgName;
    private String _legalForm;
    private String _inn;
    private String _originalInn;
    private String _kpp;
    private String _ogrn;
    private Date _regDate;
    private Date _originalRegDate;
    private boolean _isArchived;
    private boolean _originalIsArchived;
    private boolean _setOriginalIsArchived;
    private long _districtId;
    private long _originalDistrictId;
    private boolean _setOriginalDistrictId;
    private long _columnBitmask;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Farmer toModel(FarmerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Farmer model = new FarmerImpl();

        model.setFarmerId(soapModel.getFarmerId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setOrgName(soapModel.getOrgName());
        model.setLegalForm(soapModel.getLegalForm());
        model.setInn(soapModel.getInn());
        model.setKpp(soapModel.getKpp());
        model.setOgrn(soapModel.getOgrn());
        model.setRegDate(soapModel.getRegDate());
        model.setIsArchived(soapModel.getIsArchived());
        model.setDistrictId(soapModel.getDistrictId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Farmer> toModels(FarmerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Farmer> models = new ArrayList<Farmer>(soapModels.length);

        for (FarmerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFarmerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("farmerId", getFarmerId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("orgName", getOrgName());
        attributes.put("legalForm", getLegalForm());
        attributes.put("inn", getInn());
        attributes.put("kpp", getKpp());
        attributes.put("ogrn", getOgrn());
        attributes.put("regDate", getRegDate());
        attributes.put("isArchived", getIsArchived());
        attributes.put("districtId", getDistrictId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String orgName = (String) attributes.get("orgName");

        if (orgName != null) {
            setOrgName(orgName);
        }

        String legalForm = (String) attributes.get("legalForm");

        if (legalForm != null) {
            setLegalForm(legalForm);
        }

        String inn = (String) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        String kpp = (String) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        String ogrn = (String) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        Date regDate = (Date) attributes.get("regDate");

        if (regDate != null) {
            setRegDate(regDate);
        }

        Boolean isArchived = (Boolean) attributes.get("isArchived");

        if (isArchived != null) {
            setIsArchived(isArchived);
        }

        Long districtId = (Long) attributes.get("districtId");

        if (districtId != null) {
            setDistrictId(districtId);
        }
    }

    @JSON
    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _farmerId = farmerId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getOrgName() {
        if (_orgName == null) {
            return StringPool.BLANK;
        } else {
            return _orgName;
        }
    }

    @Override
    public void setOrgName(String orgName) {
        _columnBitmask = -1L;

        if (_originalOrgName == null) {
            _originalOrgName = _orgName;
        }

        _orgName = orgName;
    }

    public String getOriginalOrgName() {
        return GetterUtil.getString(_originalOrgName);
    }

    @JSON
    @Override
    public String getLegalForm() {
        if (_legalForm == null) {
            return StringPool.BLANK;
        } else {
            return _legalForm;
        }
    }

    @Override
    public void setLegalForm(String legalForm) {
        _legalForm = legalForm;
    }

    @JSON
    @Override
    public String getInn() {
        if (_inn == null) {
            return StringPool.BLANK;
        } else {
            return _inn;
        }
    }

    @Override
    public void setInn(String inn) {
        _columnBitmask |= INN_COLUMN_BITMASK;

        if (_originalInn == null) {
            _originalInn = _inn;
        }

        _inn = inn;
    }

    public String getOriginalInn() {
        return GetterUtil.getString(_originalInn);
    }

    @JSON
    @Override
    public String getKpp() {
        if (_kpp == null) {
            return StringPool.BLANK;
        } else {
            return _kpp;
        }
    }

    @Override
    public void setKpp(String kpp) {
        _kpp = kpp;
    }

    @JSON
    @Override
    public String getOgrn() {
        if (_ogrn == null) {
            return StringPool.BLANK;
        } else {
            return _ogrn;
        }
    }

    @Override
    public void setOgrn(String ogrn) {
        _ogrn = ogrn;
    }

    @JSON
    @Override
    public Date getRegDate() {
        return _regDate;
    }

    @Override
    public void setRegDate(Date regDate) {
        _columnBitmask |= REGDATE_COLUMN_BITMASK;

        if (_originalRegDate == null) {
            _originalRegDate = _regDate;
        }

        _regDate = regDate;
    }

    public Date getOriginalRegDate() {
        return _originalRegDate;
    }

    @JSON
    @Override
    public boolean getIsArchived() {
        return _isArchived;
    }

    @Override
    public boolean isIsArchived() {
        return _isArchived;
    }

    @Override
    public void setIsArchived(boolean isArchived) {
        _columnBitmask |= ISARCHIVED_COLUMN_BITMASK;

        if (!_setOriginalIsArchived) {
            _setOriginalIsArchived = true;

            _originalIsArchived = _isArchived;
        }

        _isArchived = isArchived;
    }

    public boolean getOriginalIsArchived() {
        return _originalIsArchived;
    }

    @JSON
    @Override
    public long getDistrictId() {
        return _districtId;
    }

    @Override
    public void setDistrictId(long districtId) {
        _columnBitmask |= DISTRICTID_COLUMN_BITMASK;

        if (!_setOriginalDistrictId) {
            _setOriginalDistrictId = true;

            _originalDistrictId = _districtId;
        }

        _districtId = districtId;
    }

    public long getOriginalDistrictId() {
        return _originalDistrictId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setFarmerId(getFarmerId());
        farmerImpl.setCompanyId(getCompanyId());
        farmerImpl.setGroupId(getGroupId());
        farmerImpl.setUserId(getUserId());
        farmerImpl.setCreateDate(getCreateDate());
        farmerImpl.setModifiedDate(getModifiedDate());
        farmerImpl.setOrgName(getOrgName());
        farmerImpl.setLegalForm(getLegalForm());
        farmerImpl.setInn(getInn());
        farmerImpl.setKpp(getKpp());
        farmerImpl.setOgrn(getOgrn());
        farmerImpl.setRegDate(getRegDate());
        farmerImpl.setIsArchived(getIsArchived());
        farmerImpl.setDistrictId(getDistrictId());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        int value = 0;

        value = getOrgName().compareTo(farmer.getOrgName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FarmerModelImpl farmerModelImpl = this;

        farmerModelImpl._originalGroupId = farmerModelImpl._groupId;

        farmerModelImpl._setOriginalGroupId = false;

        farmerModelImpl._originalOrgName = farmerModelImpl._orgName;

        farmerModelImpl._originalInn = farmerModelImpl._inn;

        farmerModelImpl._originalRegDate = farmerModelImpl._regDate;

        farmerModelImpl._originalIsArchived = farmerModelImpl._isArchived;

        farmerModelImpl._setOriginalIsArchived = false;

        farmerModelImpl._originalDistrictId = farmerModelImpl._districtId;

        farmerModelImpl._setOriginalDistrictId = false;

        farmerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.farmerId = getFarmerId();

        farmerCacheModel.companyId = getCompanyId();

        farmerCacheModel.groupId = getGroupId();

        farmerCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            farmerCacheModel.createDate = createDate.getTime();
        } else {
            farmerCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            farmerCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            farmerCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        farmerCacheModel.orgName = getOrgName();

        String orgName = farmerCacheModel.orgName;

        if ((orgName != null) && (orgName.length() == 0)) {
            farmerCacheModel.orgName = null;
        }

        farmerCacheModel.legalForm = getLegalForm();

        String legalForm = farmerCacheModel.legalForm;

        if ((legalForm != null) && (legalForm.length() == 0)) {
            farmerCacheModel.legalForm = null;
        }

        farmerCacheModel.inn = getInn();

        String inn = farmerCacheModel.inn;

        if ((inn != null) && (inn.length() == 0)) {
            farmerCacheModel.inn = null;
        }

        farmerCacheModel.kpp = getKpp();

        String kpp = farmerCacheModel.kpp;

        if ((kpp != null) && (kpp.length() == 0)) {
            farmerCacheModel.kpp = null;
        }

        farmerCacheModel.ogrn = getOgrn();

        String ogrn = farmerCacheModel.ogrn;

        if ((ogrn != null) && (ogrn.length() == 0)) {
            farmerCacheModel.ogrn = null;
        }

        Date regDate = getRegDate();

        if (regDate != null) {
            farmerCacheModel.regDate = regDate.getTime();
        } else {
            farmerCacheModel.regDate = Long.MIN_VALUE;
        }

        farmerCacheModel.isArchived = getIsArchived();

        farmerCacheModel.districtId = getDistrictId();

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{farmerId=");
        sb.append(getFarmerId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", orgName=");
        sb.append(getOrgName());
        sb.append(", legalForm=");
        sb.append(getLegalForm());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", regDate=");
        sb.append(getRegDate());
        sb.append(", isArchived=");
        sb.append(getIsArchived());
        sb.append(", districtId=");
        sb.append(getDistrictId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.liferay.docs.infos.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orgName</column-name><column-value><![CDATA[");
        sb.append(getOrgName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalForm</column-name><column-value><![CDATA[");
        sb.append(getLegalForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regDate</column-name><column-value><![CDATA[");
        sb.append(getRegDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isArchived</column-name><column-value><![CDATA[");
        sb.append(getIsArchived());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>districtId</column-name><column-value><![CDATA[");
        sb.append(getDistrictId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
